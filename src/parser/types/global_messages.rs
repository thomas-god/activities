#[cfg(test)]
use strum::{EnumIter, IntoEnumIterator};

#[derive(Debug, Clone)]
#[cfg_attr(test, derive(EnumIter))]
pub enum GlobalMessage {
    FileId,
    Record,
    Session,
    Lap,
    DeviceInfo,
    Activity,
    Event,
    FieldDescription,
    DeveloperDataId,
    Unsupported(u16),
}

impl From<u16> for GlobalMessage {
    fn from(value: u16) -> Self {
        match value {
            0 => Self::FileId,
            18 => Self::Session,
            19 => Self::Lap,
            20 => Self::Record,
            21 => Self::Event,
            23 => Self::DeviceInfo,
            34 => Self::Activity,
            206 => Self::FieldDescription,
            207 => Self::DeveloperDataId,
            val => Self::Unsupported(val),
        }
    }
}

impl GlobalMessage {
    pub fn parse_field(&self, definition_number: u8) -> DataField {
        match self {
            GlobalMessage::Record => DataField::Record(RecordField::from(definition_number)),
            GlobalMessage::FileId => DataField::FileId(FileIdField::from(definition_number)),
            GlobalMessage::FieldDescription => {
                DataField::FieldDescription(FieldDescriptionField::from(definition_number))
            }
            GlobalMessage::DeveloperDataId => {
                DataField::DeveloperDataId(DeveloperDataIdField::from(definition_number))
            }
            GlobalMessage::Session => DataField::Session(SessionField::from(definition_number)),
            GlobalMessage::Lap => DataField::Lap(LapField::from(definition_number)),
            GlobalMessage::Event => DataField::Event(EventField::from(definition_number)),
            GlobalMessage::DeviceInfo => {
                DataField::DeviceInfo(DeviceInfoField::from(definition_number))
            }
            GlobalMessage::Activity => DataField::Activity(ActivityField::from(definition_number)),
            GlobalMessage::Unsupported(_) => DataField::Unknown,
        }
    }
}

#[derive(Debug, Clone)]
pub enum DataField {
    FileId(FileIdField),
    Session(SessionField),
    Lap(LapField),
    Event(EventField),
    DeviceInfo(DeviceInfoField),
    Activity(ActivityField),
    Record(RecordField),
    FieldDescription(FieldDescriptionField),
    DeveloperDataId(DeveloperDataIdField),
    Custom(CustomField),
    Unknown,
}

#[derive(Debug, Clone)]
pub struct CustomField {
    pub name: Option<String>,
    pub units: Option<String>,
}

#[derive(Debug, Clone, Copy)]
pub enum FileIdField {
    Type,
    Manufacturer,
    Product,
    SerialNumber,
    TimeCreated,
    Number,
    ProductName,
    Unknown(u8),
}

impl From<u8> for FileIdField {
    fn from(value: u8) -> Self {
        match value {
            0 => Self::Type,
            1 => Self::Manufacturer,
            2 => Self::Product,
            3 => Self::ProductName,
            4 => Self::SerialNumber,
            5 => Self::TimeCreated,
            6 => Self::Number,
            7 => Self::ProductName,
            val => Self::Unknown(val),
        }
    }
}

#[derive(Debug, Clone, Copy)]
pub enum FieldDescriptionField {
    DeveloperDataIndex,
    FieldDefinitionNumber,
    FitBaseTypeId,
    FieldName,
    Array,
    Components,
    Scale,
    Offset,
    Units,
    Bits,
    Accumulate,
    FitBaseUnitId,
    NativeMesgNum,
    NativeFieldNum,

    Unknown(u8),
}

impl From<u8> for FieldDescriptionField {
    fn from(value: u8) -> Self {
        match value {
            0 => Self::DeveloperDataIndex,
            1 => Self::FieldDefinitionNumber,
            2 => Self::FitBaseTypeId,
            3 => Self::FieldName,
            4 => Self::Array,
            5 => Self::Components,
            6 => Self::Scale,
            7 => Self::Offset,
            8 => Self::Units,
            9 => Self::Bits,
            10 => Self::Accumulate,
            13 => Self::FitBaseUnitId,
            14 => Self::NativeMesgNum,
            15 => Self::NativeFieldNum,
            val => Self::Unknown(val),
        }
    }
}

#[derive(Debug, Clone, Copy)]
pub enum DeveloperDataIdField {
    DeveloperId,
    ApplicationId,
    ManufacturerId,
    DeveloperDataIndex,
    ApplicationVersion,
    Unknown(u8),
}

impl From<u8> for DeveloperDataIdField {
    fn from(value: u8) -> Self {
        match value {
            0 => Self::DeveloperId,
            1 => Self::ApplicationId,
            2 => Self::ManufacturerId,
            3 => Self::DeveloperDataIndex,
            4 => Self::ApplicationVersion,
            val => Self::Unknown(val),
        }
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum RecordField {
    PositionLat,
    PositionLong,
    Altitude,
    HeartRate,
    Cadence,
    Distance,
    Speed,
    Power,
    CompressedSpeedDistance,
    Grade,
    Resistance,
    TimeFromCourse,
    CycleLength,
    Temperature,
    Speed1s,
    Cycles,
    TotalCycles,
    CompressedAccumulatedPower,
    AccumulatedPower,
    LeftRightBalance,
    GpsAccuracy,
    VerticalSpeed,
    Calories,
    VerticalOscillation,
    StanceTimePercent,
    StanceTime,
    ActivityType,
    LeftTorqueEffectiveness,
    RightTorqueEffectiveness,
    LeftPedalSmoothness,
    RightPedalSmoothness,
    CombinedPedalSmoothness,
    Time128,
    StrokeType,
    Zone,
    BallSpeed,
    Cadence256,
    FractionalCadence,
    TotalHemoglobinConc,
    TotalHemoglobinConcMin,
    TotalHemoglobinConcMax,
    SaturatedHemoglobinPercent,
    SaturatedHemoglobinPercentMin,
    SaturatedHemoglobinPercentMax,
    DeviceIndex,
    LeftPco,
    RightPco,
    LeftPowerPhase,
    LeftPowerPhasePeak,
    RightPowerPhase,
    RightPowerPhasePeak,
    EnhancedSpeed,
    EnhancedAltitude,
    BatterySoc,
    MotorPower,
    VerticalRatio,
    StanceTimeBalance,
    StepLength,
    CycleLength16,
    AbsolutePressure,
    Depth,
    NextStopDepth,
    NextStopTime,
    TimeToSurface,
    NdlTime,
    CnsLoad,
    N2Load,
    RespirationRate,
    EnhancedRespirationRate,
    Grit,
    Flow,
    CurrentStress,
    EbikeTraverRange,
    EbikeBatteryLevel,
    EbikeAssistMode,
    EbikeAssistLevelPercent,
    AirTimeRemaining,
    PressureSac,
    VolumeSac,
    Rmv,
    AscentRate,
    Po2,
    CoreTemperature,
    Timestamp,
    Unknown(u8),
}

impl From<u8> for RecordField {
    fn from(value: u8) -> Self {
        match value {
            0 => Self::PositionLat,
            1 => Self::PositionLong,
            2 => Self::Altitude,
            3 => Self::HeartRate,
            4 => Self::Cadence,
            5 => Self::Distance,
            6 => Self::Speed,
            7 => Self::Power,
            8 => Self::CompressedSpeedDistance,
            9 => Self::Grade,
            10 => Self::Resistance,
            11 => Self::TimeFromCourse,
            12 => Self::CycleLength,
            13 => Self::Temperature,
            17 => Self::Speed1s,
            18 => Self::Cycles,
            19 => Self::TotalCycles,
            28 => Self::CompressedAccumulatedPower,
            29 => Self::AccumulatedPower,
            30 => Self::LeftRightBalance,
            31 => Self::GpsAccuracy,
            32 => Self::VerticalSpeed,
            33 => Self::Calories,
            39 => Self::VerticalOscillation,
            40 => Self::StanceTimePercent,
            41 => Self::StanceTime,
            42 => Self::ActivityType,
            43 => Self::LeftTorqueEffectiveness,
            44 => Self::RightTorqueEffectiveness,
            45 => Self::LeftPedalSmoothness,
            46 => Self::RightPedalSmoothness,
            47 => Self::CombinedPedalSmoothness,
            48 => Self::Time128,
            49 => Self::StrokeType,
            50 => Self::Zone,
            51 => Self::BallSpeed,
            52 => Self::Cadence256,
            53 => Self::FractionalCadence,
            54 => Self::TotalHemoglobinConc,
            55 => Self::TotalHemoglobinConcMin,
            56 => Self::TotalHemoglobinConcMax,
            57 => Self::SaturatedHemoglobinPercent,
            58 => Self::SaturatedHemoglobinPercentMin,
            59 => Self::SaturatedHemoglobinPercentMax,
            62 => Self::DeviceIndex,
            67 => Self::LeftPco,
            68 => Self::RightPco,
            69 => Self::LeftPowerPhase,
            70 => Self::LeftPowerPhasePeak,
            71 => Self::RightPowerPhase,
            72 => Self::RightPowerPhasePeak,
            73 => Self::EnhancedSpeed,
            78 => Self::EnhancedAltitude,
            81 => Self::BatterySoc,
            82 => Self::MotorPower,
            83 => Self::VerticalRatio,
            84 => Self::StanceTimeBalance,
            85 => Self::StepLength,
            87 => Self::CycleLength16,
            91 => Self::AbsolutePressure,
            92 => Self::Depth,
            93 => Self::NextStopDepth,
            94 => Self::NextStopTime,
            95 => Self::TimeToSurface,
            96 => Self::NdlTime,
            97 => Self::CnsLoad,
            98 => Self::N2Load,
            99 => Self::RespirationRate,
            108 => Self::EnhancedRespirationRate,
            114 => Self::Grit,
            115 => Self::Flow,
            116 => Self::CurrentStress,
            117 => Self::EbikeTraverRange,
            118 => Self::EbikeBatteryLevel,
            119 => Self::EbikeAssistMode,
            120 => Self::EbikeAssistLevelPercent,
            123 => Self::AirTimeRemaining,
            124 => Self::PressureSac,
            125 => Self::VolumeSac,
            126 => Self::Rmv,
            127 => Self::AscentRate,
            129 => Self::Po2,
            139 => Self::CoreTemperature,
            253 => Self::Timestamp,
            val => Self::Unknown(val),
        }
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum SessionField {
    MessageIndex,
    Timestamp,
    Event,
    EventType,
    StartTime,
    StartPositionLat,
    StartPositionLong,
    Sport,
    SubSport,
    TotalElapsedTime,
    TotalTimerTime,
    TotalDistance,
    TotalCycles,
    TotalCalories,
    TotalFatCalories,
    AvgSpeed,
    MaxSpeed,
    AvgHeartRate,
    MaxHeartRate,
    AvgCadence,
    MaxCadence,
    AvgPower,
    MaxPower,
    TotalAscent,
    TotalDescent,
    TotalTrainingEffect,
    FirstLapIndex,
    NumLaps,
    EventGroup,
    Trigger,
    NecLat,
    NecLong,
    SwcLat,
    SwcLong,
    NumLengths,
    NormalizedPower,
    TrainingStressScore,
    IntensityFactor,
    LeftRightBalance,
    EndPositionLat,
    EndPositionLong,
    AvgStrokeCount,
    AvgStrokeDistance,
    SwimStroke,
    PoolLength,
    ThresholdPower,
    PoolLengthUnit,
    NumActiveLengths,
    TotalWork,
    AvgAltitude,
    MaxAltitude,
    GpsAccuracy,
    AvgGrade,
    AvgPosGrade,
    AvgNegGrade,
    MaxPosGrade,
    MaxNegGrade,
    AvgTemperature,
    MaxTemperature,
    TotalMovingTime,
    AvgPosVerticalSpeed,
    AvgNegVerticalSpeed,
    MaxPosVerticalSpeed,
    MaxNegVerticalSpeed,
    MinHeartRate,
    TimeInHrZone,
    TimeInSpeedZone,
    TimeInCadenceZone,
    TimeInPowerZone,
    AvgLapTime,
    BestLapIndex,
    MinAltitude,
    PlayerScore,
    OpponentScore,
    OpponentName,
    StrokeCount,
    ZoneCount,
    MaxBallSpeed,
    AvgBallSpeed,
    AvgVerticalOscillation,
    AvgStanceTimePercent,
    AvgStanceTime,
    AvgFractionalCadence,
    MaxFractionalCadence,
    TotalFractionalCycles,
    AvgTotalHemoglobinConc,
    MinTotalHemoglobinConc,
    MaxTotalHemoglobinConc,
    AvgSaturatedHemoglobinPercent,
    MinSaturatedHemoglobinPercent,
    MaxSaturatedHemoglobinPercent,
    AvgLeftTorqueEffectiveness,
    AvgRightTorqueEffectiveness,
    AvgLeftPedalSmoothness,
    AvgRightPedalSmoothness,
    AvgCombinedPedalSmoothness,
    SportProfileName,
    SportIndex,
    TimeStanding,
    StandCount,
    AvgLeftPco,
    AvgRightPco,
    AvgLeftPowerPhase,
    AvgLeftPowerPhasePeak,
    AvgRightPowerPhase,
    AvgRightPowerPhasePeak,
    AvgPowerPosition,
    MaxPowerPosition,
    AvgCadencePosition,
    MaxCadencePosition,
    EnhancedAvgSpeed,
    EnhancedMaxSpeed,
    EnhancedAvgAltitude,
    EnhancedMinAltitude,
    EnhancedMaxAltitude,
    AvgLevMotorPower,
    MaxLevMotorPower,
    LevBatteryConsumption,
    AvgVerticalRatio,
    AvgStanceTimeBalance,
    AvgStepLength,
    TotalAnaerobicTrainingEffect,
    AvgVam,
    AvgDepth,
    MaxDepth,
    SurfaceInterval,
    StartCns,
    EndCns,
    StartN2,
    EndN2,
    AvgRespirationRate,
    MaxRespirationRate,
    MinRespirationRate,
    MinTemperature,
    O2Toxicity,
    DiveNumber,
    TrainingLoadPeak,
    EnhancedAvgRespirationRate,
    EnhancedMaxRespirationRate,
    EnhancedMinRespirationRate,
    TotalGrit,
    TotalFlow,
    JumpCount,
    AvgGrit,
    AvgFlow,
    WorkoutFeel,
    WorkoutRpe,
    AvgSpo2,
    AvgStress,
    SdrrHrv,
    RmssdHrv,
    TotalFractionalAscent,
    TotalFractionalDescent,
    AvgCoreTemperature,
    MinCoreTemperature,
    MaxCoreTemperature,
    Unknown(u8),
}

impl From<u8> for SessionField {
    fn from(value: u8) -> Self {
        match value {
            254 => Self::MessageIndex,
            253 => Self::Timestamp,
            0 => Self::Event,
            1 => Self::EventType,
            2 => Self::StartTime,
            3 => Self::StartPositionLat,
            4 => Self::StartPositionLong,
            5 => Self::Sport,
            6 => Self::SubSport,
            7 => Self::TotalElapsedTime,
            8 => Self::TotalTimerTime,
            9 => Self::TotalDistance,
            10 => Self::TotalCycles,
            11 => Self::TotalCalories,
            13 => Self::TotalFatCalories,
            14 => Self::AvgSpeed,
            15 => Self::MaxSpeed,
            16 => Self::AvgHeartRate,
            17 => Self::MaxHeartRate,
            18 => Self::AvgCadence,
            19 => Self::MaxCadence,
            20 => Self::AvgPower,
            21 => Self::MaxPower,
            22 => Self::TotalAscent,
            23 => Self::TotalDescent,
            24 => Self::TotalTrainingEffect,
            25 => Self::FirstLapIndex,
            26 => Self::NumLaps,
            27 => Self::EventGroup,
            28 => Self::Trigger,
            29 => Self::NecLat,
            30 => Self::NecLong,
            31 => Self::SwcLat,
            32 => Self::SwcLong,
            33 => Self::NumLengths,
            34 => Self::NormalizedPower,
            35 => Self::TrainingStressScore,
            36 => Self::IntensityFactor,
            37 => Self::LeftRightBalance,
            38 => Self::EndPositionLat,
            39 => Self::EndPositionLong,
            41 => Self::AvgStrokeCount,
            42 => Self::AvgStrokeDistance,
            43 => Self::SwimStroke,
            44 => Self::PoolLength,
            45 => Self::ThresholdPower,
            46 => Self::PoolLengthUnit,
            47 => Self::NumActiveLengths,
            48 => Self::TotalWork,
            49 => Self::AvgAltitude,
            50 => Self::MaxAltitude,
            51 => Self::GpsAccuracy,
            52 => Self::AvgGrade,
            53 => Self::AvgPosGrade,
            54 => Self::AvgNegGrade,
            55 => Self::MaxPosGrade,
            56 => Self::MaxNegGrade,
            57 => Self::AvgTemperature,
            58 => Self::MaxTemperature,
            59 => Self::TotalMovingTime,
            60 => Self::AvgPosVerticalSpeed,
            61 => Self::AvgNegVerticalSpeed,
            62 => Self::MaxPosVerticalSpeed,
            63 => Self::MaxNegVerticalSpeed,
            64 => Self::MinHeartRate,
            65 => Self::TimeInHrZone,
            66 => Self::TimeInSpeedZone,
            67 => Self::TimeInCadenceZone,
            68 => Self::TimeInPowerZone,
            69 => Self::AvgLapTime,
            70 => Self::BestLapIndex,
            71 => Self::MinAltitude,
            82 => Self::PlayerScore,
            83 => Self::OpponentScore,
            84 => Self::OpponentName,
            85 => Self::StrokeCount,
            86 => Self::ZoneCount,
            87 => Self::MaxBallSpeed,
            88 => Self::AvgBallSpeed,
            89 => Self::AvgVerticalOscillation,
            90 => Self::AvgStanceTimePercent,
            91 => Self::AvgStanceTime,
            92 => Self::AvgFractionalCadence,
            93 => Self::MaxFractionalCadence,
            94 => Self::TotalFractionalCycles,
            95 => Self::AvgTotalHemoglobinConc,
            96 => Self::MinTotalHemoglobinConc,
            97 => Self::MaxTotalHemoglobinConc,
            98 => Self::AvgSaturatedHemoglobinPercent,
            99 => Self::MinSaturatedHemoglobinPercent,
            100 => Self::MaxSaturatedHemoglobinPercent,
            101 => Self::AvgLeftTorqueEffectiveness,
            102 => Self::AvgRightTorqueEffectiveness,
            103 => Self::AvgLeftPedalSmoothness,
            104 => Self::AvgRightPedalSmoothness,
            105 => Self::AvgCombinedPedalSmoothness,
            110 => Self::SportProfileName,
            111 => Self::SportIndex,
            112 => Self::TimeStanding,
            113 => Self::StandCount,
            114 => Self::AvgLeftPco,
            115 => Self::AvgRightPco,
            116 => Self::AvgLeftPowerPhase,
            117 => Self::AvgLeftPowerPhasePeak,
            118 => Self::AvgRightPowerPhase,
            119 => Self::AvgRightPowerPhasePeak,
            120 => Self::AvgPowerPosition,
            121 => Self::MaxPowerPosition,
            122 => Self::AvgCadencePosition,
            123 => Self::MaxCadencePosition,
            124 => Self::EnhancedAvgSpeed,
            125 => Self::EnhancedMaxSpeed,
            126 => Self::EnhancedAvgAltitude,
            127 => Self::EnhancedMinAltitude,
            128 => Self::EnhancedMaxAltitude,
            129 => Self::AvgLevMotorPower,
            130 => Self::MaxLevMotorPower,
            131 => Self::LevBatteryConsumption,
            132 => Self::AvgVerticalRatio,
            133 => Self::AvgStanceTimeBalance,
            134 => Self::AvgStepLength,
            137 => Self::TotalAnaerobicTrainingEffect,
            139 => Self::AvgVam,
            140 => Self::AvgDepth,
            141 => Self::MaxDepth,
            142 => Self::SurfaceInterval,
            143 => Self::StartCns,
            144 => Self::EndCns,
            145 => Self::StartN2,
            146 => Self::EndN2,
            147 => Self::AvgRespirationRate,
            148 => Self::MaxRespirationRate,
            149 => Self::MinRespirationRate,
            150 => Self::MinTemperature,
            155 => Self::O2Toxicity,
            156 => Self::DiveNumber,
            168 => Self::TrainingLoadPeak,
            169 => Self::EnhancedAvgRespirationRate,
            170 => Self::EnhancedMaxRespirationRate,
            180 => Self::EnhancedMinRespirationRate,
            181 => Self::TotalGrit,
            182 => Self::TotalFlow,
            183 => Self::JumpCount,
            186 => Self::AvgGrit,
            187 => Self::AvgFlow,
            192 => Self::WorkoutFeel,
            193 => Self::WorkoutRpe,
            194 => Self::AvgSpo2,
            195 => Self::AvgStress,
            197 => Self::SdrrHrv,
            198 => Self::RmssdHrv,
            199 => Self::TotalFractionalAscent,
            200 => Self::TotalFractionalDescent,
            208 => Self::AvgCoreTemperature,
            209 => Self::MinCoreTemperature,
            210 => Self::MaxCoreTemperature,
            _ => Self::Unknown(value),
        }
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum LapField {
    MessageIndex,
    Timestamp,
    Event,
    EventType,
    StartTime,
    StartPositionLat,
    StartPositionLong,
    EndPositionLat,
    EndPositionLong,
    TotalElapsedTime,
    TotalTimerTime,
    TotalDistance,
    TotalCycles,
    TotalCalories,
    TotalFatCalories,
    AvgSpeed,
    MaxSpeed,
    AvgHeartRate,
    MaxHeartRate,
    AvgCadence,
    MaxCadence,
    AvgPower,
    MaxPower,
    TotalAscent,
    TotalDescent,
    Intensity,
    LapTrigger,
    Sport,
    EventGroup,
    NumLengths,
    NormalizedPower,
    LeftRightBalance,
    FirstLengthIndex,
    AvgStrokeDistance,
    SwimStroke,
    SubSport,
    NumActiveLengths,
    TotalWork,
    AvgAltitude,
    MaxAltitude,
    GpsAccuracy,
    AvgGrade,
    AvgPosGrade,
    AvgNegGrade,
    MaxPosGrade,
    MaxNegGrade,
    AvgTemperature,
    MaxTemperature,
    TotalMovingTime,
    AvgPosVerticalSpeed,
    AvgNegVerticalSpeed,
    MaxPosVerticalSpeed,
    MaxNegVerticalSpeed,
    TimeInHrZone,
    TimeInSpeedZone,
    TimeInCadenceZone,
    TimeInPowerZone,
    RepetitionNum,
    MinAltitude,
    MinHeartRate,
    WktStepIndex,
    OpponentScore,
    StrokeCount,
    ZoneCount,
    AvgVerticalOscillation,
    AvgStanceTimePercent,
    AvgStanceTime,
    AvgFractionalCadence,
    MaxFractionalCadence,
    TotalFractionalCycles,
    PlayerScore,
    AvgTotalHemoglobinConc,
    MinTotalHemoglobinConc,
    MaxTotalHemoglobinConc,
    AvgSaturatedHemoglobinPercent,
    MinSaturatedHemoglobinPercent,
    MaxSaturatedHemoglobinPercent,
    AvgLeftTorqueEffectiveness,
    AvgRightTorqueEffectiveness,
    AvgLeftPedalSmoothness,
    AvgRightPedalSmoothness,
    AvgCombinedPedalSmoothness,
    TimeStanding,
    StandCount,
    AvgLeftPco,
    AvgRightPco,
    AvgLeftPowerPhase,
    AvgLeftPowerPhasePeak,
    AvgRightPowerPhase,
    AvgRightPowerPhasePeak,
    AvgPowerPosition,
    MaxPowerPosition,
    AvgCadencePosition,
    MaxCadencePosition,
    EnhancedAvgSpeed,
    EnhancedMaxSpeed,
    EnhancedAvgAltitude,
    EnhancedMinAltitude,
    EnhancedMaxAltitude,
    AvgLevMotorPower,
    MaxLevMotorPower,
    LevBatteryConsumption,
    AvgVerticalRatio,
    AvgStanceTimeBalance,
    AvgStepLength,
    AvgVam,
    AvgDepth,
    MaxDepth,
    MinTemperature,
    EnhancedAvgRespirationRate,
    EnhancedMaxRespirationRate,
    AvgRespirationRate,
    MaxRespirationRate,
    TotalGrit,
    TotalFlow,
    JumpCount,
    AvgGrit,
    AvgFlow,
    TotalFractionalAscent,
    TotalFractionalDescent,
    AvgCoreTemperature,
    MinCoreTemperature,
    MaxCoreTemperature,
    Unknown(u8),
}

impl From<u8> for LapField {
    fn from(value: u8) -> Self {
        match value {
            254 => Self::MessageIndex,
            253 => Self::Timestamp,
            0 => Self::Event,
            1 => Self::EventType,
            2 => Self::StartTime,
            3 => Self::StartPositionLat,
            4 => Self::StartPositionLong,
            5 => Self::EndPositionLat,
            6 => Self::EndPositionLong,
            7 => Self::TotalElapsedTime,
            8 => Self::TotalTimerTime,
            9 => Self::TotalDistance,
            10 => Self::TotalCycles,
            11 => Self::TotalCalories,
            12 => Self::TotalFatCalories,
            13 => Self::AvgSpeed,
            14 => Self::MaxSpeed,
            15 => Self::AvgHeartRate,
            16 => Self::MaxHeartRate,
            17 => Self::AvgCadence,
            18 => Self::MaxCadence,
            19 => Self::AvgPower,
            20 => Self::MaxPower,
            21 => Self::TotalAscent,
            22 => Self::TotalDescent,
            23 => Self::Intensity,
            24 => Self::LapTrigger,
            25 => Self::Sport,
            26 => Self::EventGroup,
            32 => Self::NumLengths,
            33 => Self::NormalizedPower,
            34 => Self::LeftRightBalance,
            35 => Self::FirstLengthIndex,
            37 => Self::AvgStrokeDistance,
            38 => Self::SwimStroke,
            39 => Self::SubSport,
            40 => Self::NumActiveLengths,
            41 => Self::TotalWork,
            42 => Self::AvgAltitude,
            43 => Self::MaxAltitude,
            44 => Self::GpsAccuracy,
            45 => Self::AvgGrade,
            46 => Self::AvgPosGrade,
            47 => Self::AvgNegGrade,
            48 => Self::MaxPosGrade,
            49 => Self::MaxNegGrade,
            50 => Self::AvgTemperature,
            51 => Self::MaxTemperature,
            52 => Self::TotalMovingTime,
            53 => Self::AvgPosVerticalSpeed,
            54 => Self::AvgNegVerticalSpeed,
            55 => Self::MaxPosVerticalSpeed,
            56 => Self::MaxNegVerticalSpeed,
            57 => Self::TimeInHrZone,
            58 => Self::TimeInSpeedZone,
            59 => Self::TimeInCadenceZone,
            60 => Self::TimeInPowerZone,
            61 => Self::RepetitionNum,
            62 => Self::MinAltitude,
            63 => Self::MinHeartRate,
            71 => Self::WktStepIndex,
            74 => Self::OpponentScore,
            75 => Self::StrokeCount,
            76 => Self::ZoneCount,
            77 => Self::AvgVerticalOscillation,
            78 => Self::AvgStanceTimePercent,
            79 => Self::AvgStanceTime,
            80 => Self::AvgFractionalCadence,
            81 => Self::MaxFractionalCadence,
            82 => Self::TotalFractionalCycles,
            83 => Self::PlayerScore,
            84 => Self::AvgTotalHemoglobinConc,
            85 => Self::MinTotalHemoglobinConc,
            86 => Self::MaxTotalHemoglobinConc,
            87 => Self::AvgSaturatedHemoglobinPercent,
            88 => Self::MinSaturatedHemoglobinPercent,
            89 => Self::MaxSaturatedHemoglobinPercent,
            91 => Self::AvgLeftTorqueEffectiveness,
            92 => Self::AvgRightTorqueEffectiveness,
            93 => Self::AvgLeftPedalSmoothness,
            94 => Self::AvgRightPedalSmoothness,
            95 => Self::AvgCombinedPedalSmoothness,
            98 => Self::TimeStanding,
            99 => Self::StandCount,
            100 => Self::AvgLeftPco,
            101 => Self::AvgRightPco,
            102 => Self::AvgLeftPowerPhase,
            103 => Self::AvgLeftPowerPhasePeak,
            104 => Self::AvgRightPowerPhase,
            105 => Self::AvgRightPowerPhasePeak,
            106 => Self::AvgPowerPosition,
            107 => Self::MaxPowerPosition,
            108 => Self::AvgCadencePosition,
            109 => Self::MaxCadencePosition,
            110 => Self::EnhancedAvgSpeed,
            111 => Self::EnhancedMaxSpeed,
            112 => Self::EnhancedAvgAltitude,
            113 => Self::EnhancedMinAltitude,
            114 => Self::EnhancedMaxAltitude,
            115 => Self::AvgLevMotorPower,
            116 => Self::MaxLevMotorPower,
            117 => Self::LevBatteryConsumption,
            118 => Self::AvgVerticalRatio,
            119 => Self::AvgStanceTimeBalance,
            120 => Self::AvgStepLength,
            121 => Self::AvgVam,
            122 => Self::AvgDepth,
            123 => Self::MaxDepth,
            124 => Self::MinTemperature,
            136 => Self::EnhancedAvgRespirationRate,
            137 => Self::EnhancedMaxRespirationRate,
            147 => Self::AvgRespirationRate,
            148 => Self::MaxRespirationRate,
            149 => Self::TotalGrit,
            150 => Self::TotalFlow,
            151 => Self::JumpCount,
            153 => Self::AvgGrit,
            154 => Self::AvgFlow,
            156 => Self::TotalFractionalAscent,
            157 => Self::TotalFractionalDescent,
            158 => Self::AvgCoreTemperature,
            159 => Self::MinCoreTemperature,
            160 => Self::MaxCoreTemperature,
            _ => Self::Unknown(value),
        }
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum DeviceInfoField {
    Timestamp,
    DeviceIndex,
    DeviceType,
    Manufacturer,
    SerialNumber,
    Product,
    SoftwareVersion,
    HardwareVersion,
    CumOperatingTime,
    BatteryVoltage,
    BatteryStatus,
    SensorPosition,
    Descriptor,
    AntTransmissionType,
    AntDeviceNumber,
    AntNetwork,
    SourceType,
    ProductName,
    Unknown(u8),
}

impl From<u8> for DeviceInfoField {
    fn from(value: u8) -> Self {
        match value {
            253 => Self::Timestamp,
            0 => Self::DeviceIndex,
            1 => Self::DeviceType,
            2 => Self::Manufacturer,
            3 => Self::SerialNumber,
            4 => Self::Product,
            5 => Self::SoftwareVersion,
            6 => Self::HardwareVersion,
            7 => Self::CumOperatingTime,
            10 => Self::BatteryVoltage,
            11 => Self::BatteryStatus,
            18 => Self::SensorPosition,
            19 => Self::Descriptor,
            20 => Self::AntTransmissionType,
            21 => Self::AntDeviceNumber,
            22 => Self::AntNetwork,
            25 => Self::SourceType,
            27 => Self::ProductName,
            _ => Self::Unknown(value),
        }
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum ActivityField {
    Timestamp,
    TotalTimerTime,
    NumSessions,
    Type,
    Event,
    EventType,
    LocalTimestamp,
    EventGroup,
    Unknown(u8),
}

impl From<u8> for ActivityField {
    fn from(value: u8) -> Self {
        match value {
            253 => Self::Timestamp,
            0 => Self::TotalTimerTime,
            1 => Self::NumSessions,
            2 => Self::Type,
            3 => Self::Event,
            4 => Self::EventType,
            5 => Self::LocalTimestamp,
            6 => Self::EventGroup,
            _ => Self::Unknown(value),
        }
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum EventField {
    Timestamp,
    Event,
    EventType,
    Data16,
    Data,
    EventGroup,
    Score,
    OpponentScore,
    FrontGearNum,
    FrontGear,
    RearGearNum,
    RearGear,
    DeviceIndex,
    ActivityType,
    StartTimestamp,
    RadarThreatLevelMax,
    RadarThreatCount,
    RadarThreatAvgApproachSpeed,
    RadarThreatMaxApproachSpeed,
    Unknown(u8),
}

impl From<u8> for EventField {
    fn from(value: u8) -> Self {
        match value {
            253 => Self::Timestamp,
            0 => Self::Event,
            1 => Self::EventType,
            2 => Self::Data16,
            3 => Self::Data,
            4 => Self::EventGroup,
            7 => Self::Score,
            8 => Self::OpponentScore,
            9 => Self::FrontGearNum,
            10 => Self::FrontGear,
            11 => Self::RearGearNum,
            12 => Self::RearGear,
            13 => Self::DeviceIndex,
            14 => Self::ActivityType,
            15 => Self::StartTimestamp,
            21 => Self::RadarThreatLevelMax,
            22 => Self::RadarThreatCount,
            23 => Self::RadarThreatAvgApproachSpeed,
            24 => Self::RadarThreatMaxApproachSpeed,
            _ => Self::Unknown(value),
        }
    }
}

#[cfg(test)]
mod tests {
    use std::mem::discriminant;

    use super::*;

    #[test]
    fn test_global_message_from_u16_is_explicit() {
        let mut missing_variants = Vec::new();
        for variant in GlobalMessage::iter() {
            let mut found = false;
            for value in 0..u16::MAX {
                if discriminant(&GlobalMessage::from(value)) == discriminant(&variant) {
                    found = true;
                    break;
                }
            }
            if found == false {
                missing_variants.push(variant);
            }
        }

        assert!(
            missing_variants.is_empty(),
            "Variants missing in GlobalMessage::from<u16>: {:?}",
            missing_variants
        );
    }
}
